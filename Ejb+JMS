INTRODUCTION TO EJB 3.0 ARCHITECTURE
	What Is EJB?
		Enterprise JavaBeans (EJB) is a platform for building portable, reusable, and scalable business applications using the Java programming language.
		
		EJB 3 is defined by JSR 220: Enterprise JavaBeans 3 . JSR220 is divided into three parts:
		
		EJB 3 Simplified API gives a high level overview of the new EJB 3 development model.
		
		EJB Core Contracts and Requirements focuses on session and message driven beans.
		
		Java Persistence API addresses entities and the persistence framework.
		
	The EJB Component Model:
		As a component model, EJB defines three object types that developers may build and customize, as follows:
			Session beans perform business service operations and orchestrate transaction and access control behavior.
			
			Message driven beans (MDBs) are invoked asynchronously in response to external events, through association with a messaging queue or topic.
			
			Entities are objects that have unique identities and represent persistent business data.
			
			Session and message driven beans are EJBs, and are often referred to collectively as enterprise beans.
			
			In EJB 3, however, entities are managed by a persistence provider and not the EJB container, and are no longer considered true enterprise beans.
			
	The EJB Framework:
		The EJB framework provides the supporting environment in which EJB components operate.
		
		This includes container transaction and security services, pooling and caching of resources, component life cycle services, concurrency support, and more.
		
		EJB components specify the details of how they wish to interact with their supporting container using EJB specific metadata that is either captured by the container and applied to the EJB’s behavior at run time, or interpreted at the time an EJB component is deployed to an EJB container and used to construct wrapping.
		
CORE FEATURES OF EJB
	Declarative Metadata
	Configuration by Exception
	Scalability
	Transactionality
	Multiuser Security
	Portability
	Reusability
	Persistence
	
PROGRESSION OF THE EJB SPEC
	Birth in 1996, or more importantly, since its first commercial implementations in 1998.
	
	EJB 1.0
		The initial release, 1.0, began with support for stateful and stateless service objects, called session beans, and optional support for persistent domain objects, called entity beans.
	
	EJB 1.1
		The follow up release, 1.1, mandated support among vendors for entity beans, and introduced the XML deployment descriptor to replace storing metadata in a special serialized class file.
	
	EJB 2.0
		Includes the message driven bean (MDB),
		
		Entity beans gained support for container managed relationships (CMRs).
		
		Enterprise JavaBeans Query Language (EJB QL).
		
	EJB 2.1
		EJB 2.1 added support for Web Services
		
		EJB 2.1 also provided expanded EJB QL function.
	
	EJB 3.0
		Its was a major milestone in the evolution of the standard. Introducing a new, simplified development model
		
		EJB components became POJOs (plain old Java objects).
		
		In EJB 3.0, the Entity Beans portion of the spec was replaced by the new JPA spec.
	
	EJB 3.1
		EJB 3.1 further improved upon the simplified development model introduced in EJB 3.0.
		
		The Singleton pattern was offered for Session beans along with Asynchronous and enhanced Timer support.
		
		EJB Lite an embeddable subset of the EJB Container’s functionality allowed EJB components to be executed in the same VM as an EJB client.
	
	EJB 3.2
		The Asynchronous and enhanced Timer features are added to the EJB Lite subset.
		
		The bean developer is offered more control over the transactionality of life cycle interceptor methods
		
XML AND ANNOTATIONS
	EJB 3 lets you store your EJB metadata inside your bean source using JDK 5.0 annotations.
	
	If we need to decouple our entity and bean classes from their EJB 3 metadata, as when we want to use the same entity classes with two different entity inheritance strategies, we put our metadata in XML.

DEPENDENCY INJECTION
	After an EJB is instantiated inside the Java EE container, but before it is handed out to a client, the container may initialize property data on the instance according to rules defined for that enterprise bean.
	
	This feature is called dependency injection , and was popularized by the Spring
	
	Instance of Inversion of Control ” IoC )
	
	Program defines dependencies and relies upon the container to supply them
	
	Annotations are useful for specifying DI because they are co located with the code May use XML if preferred
	
	Set of resources that may be injected is defined by the Java EE specification
	
	@Resource Connection factories, env entries, UserTransaction , EJBContext ,
	
	@EJB EJB business (and home) interfaces
	
	@PersistenceContext , PersistenceUnit EntityManager and EntityManagerFactory
	
INTERCEPTORS: CALLBACK METHODS
	Both enterprise beans and entities may designate some of their methods, or methods on separate classes, to be called when certain life cycle events occur.
	
	For instance, a session bean may indicate that a certain method should be called after the bean has been instantiated, but before it has been handed off to a client.
	
	Such callback methods are called interceptors, and allow bean developers to participate programmatically in the interaction between an enterprise bean, or an entity, and its container.

OTHER EJB 3.0 FEATURES
	POJO Implementation
		Intelligent Use of Defaults
	
	An excellent example of how EJB 3 simplifies the development process is its leveraging of default, assumed values to provide rich behavior with no coding or declarative metadata required.
	
	For instance, by simply marking a POJO with the @Entity annotation, all of its public properties automatically become persistent fields, and the table and column names take on derived values that match the entity and field names
	
EJB ROLES
	The EJB spec defines seven roles for individuals involved in the different stages of defining an enterprise bean or entity, or in providing services and API implementation to enterprise beans.
	
	The Enterprise Bean Provider
		The Enterprise Bean Provider, also known as the Bean Provider, has the responsibility of defining and implementing the business logic and structure of an enterprise bean.
	
	The Application Assembler
		 The Application Assembler combines EJBs into EJB modules and entities into persistence archives, and then combines these modules together with other Java EE modules to produce an application.
		
	Container Provider’s Responsibilities
		The EJB Container Provider is responsible for providing the deployment tools that the Deployer can use to perform his tasks.
		
		The EJB Container PROVIDES a SECURITY DOMAIN and one or more principal realms to the enterprise beans. The EJB architecture does not specify how an EJB Server should implement a security domain, and does not define the scope of a security domain.
		
	System Administrator's responsibilities
		The System Administrator is responsible for the administration of principals. Security domain administration is beyond the scope of the EJB specification.
		
		Typically, the System Administrator is responsible for creating a new user account, adding a user to a user group, removing a user from a user group, and removing or freezing a user account.
	
	Deployer's responsibilities
		The Deployer uses deployment tools provided by the EJB Container Provider to read the security view of the application supplied by the Application Assembler in the deployment descriptor
		
SESSION BEAN
	Session beans are Java components that run in either stand alone EJB containers or EJB containers that are part of standard Java Platform, Enterprise Edition (Java EE) application servers.
	
	These Java components are typically used to model a particular user task or use case, such as entering customer information or implementing a process that maintains a conversation state with a client application.
	
	Session beans can hold the business logic for many types of applications, such as human resources, order entry, and expense reporting applications.

TYPES OF SESSION BEANS
	Session beans are of two types, as follows:
		Stateless : This type of bean does not maintain any conversational state on behalf of a client
		
		Stateful This type of bean maintains state, and a particular instance of the bean is associated with a specific client request. Stateful beans can be seen as extensions to client programs that are running on the server.
		
		A singleton session bean is instantiated once per application and exists for the lifecycle of the application. Singleton session beans are designed for circumstances in which a single enterprise bean instance is shared across and concurrently accessed by clients.

WHEN DO YOU USE SESSION BEANS?
	Stateful session beans are appropriate if any of the following conditions are true.
		The bean’s state represents the interaction between the bean and a specific client.
		
		The bean needs to hold information about the client across method invocations.
		
		The bean mediates between the client and the other components of the application, presenting a simplified view to the client.
		
		Behind the scenes, the bean manages the work flow of several enterprise beans.
		
		To improve performance, you might choose a stateless session bean if it has any of these traits.
			The bean’s state has no data for a specific client.
			
			In a single method invocation, the bean performs a generic task for all clients. For example, you might use a stateless session bean to send an email that confirms an online order.
			
			The bean implements a web service.
	
	Singleton session beans are appropriate in the following circumstances.
		State needs to be shared across the application.
		
		A single enterprise bean needs to be accessed by multiple threads concurrently.
		
		The application needs an enterprise bean to perform tasks upon application startup and shutdown.
		
		The bean implements a web service.
		
WHEN DO YOU USE SESSION BEANS?
	◌ Session beans are used to write business logic, maintain a conversation state for the client, and model back-end processes or user tasks that perform one or more business operations. Typical examples include the following:
	
	◌ A session bean in a human resources application that creates a new employee and assigns the employee to a particular department.
	
	◌ A session bean in an expense reporting application that creates a new expense report.

SESSION BEANS PROGRAMMING RULES
	A session bean must have at least one business interface.
	
	The session bean class must be concrete.
	
	Session Bean must have a no argument constructor in the bean class.
	
	A session bean class can subclass another session bean or any other POJO.
	
	The business methods and lifecycle callback methods may be defined either in the bean class or in asuperclass.
	
	Business method names must not start with “ejb.”
	
	Session Bean must define all business methods as public, but not final or static.

BEAN LIFECYCLE CALLBACKS
	A session bean has a lifecycle.
	
	This mean that beans go through a predefined set of state transitions.
	
	The lifecycle events:
		The most obvious two events of a bean lifecycle are creation and destruction . All EJBs go through thesetwo phases.
		
		In addition, stateful session beans go through the passivation activation cycle.
		
		The lifecycle for a session bean starts when a bean instance is created.
			The container invokes the newInstance method on the bean object. This essentially translates to a constructor invocation on the bean implementation class.
			
			If the bean uses DI, all dependencies on resources, other beans, and environment components are injected into the newly created bean instance.

CALLBACK METHODS
	Lifecycle callbacks are bean methods (not exposed by a business interface) that the container calls to notify the bean about a lifecycle transition, or event. When the event occurs, the container invokes the corresponding callback method, and you can use these methods to perform business logic or operations such as initialization and cleanup of resources.
	
	PostConstruct : Denoted with the @PostContruct annotation. Any method in the bean class can be marked with this annotation.
	
	PreDestroy Denoted with the @PreDestroy annotation.

JNDI NAMESPACES
	Three JNDI namespaces are used for portable JNDI lookups: java:global, java:module, and java:app.
		
		java:global[/application name]/module name/enterprise bean name[/interface name]
			◌ Application name and module name default to the name of the application and module minus the file extension. Application names are required only if the application is packaged within an EAR. The interface name is required only if the enterprise bean implements more than one business interface.
			
			◌ The java:module namespace is used to look up local enterprise beans within the same module. JNDI addresses using the java:module namespace are of the following form:
		
		java:module/enterprise bean name/[interface name]
			◌ The interface name is required only if the enterprise bean implements more than one business interface.
			
			◌ The java:app namespace is used to look up local enterprise beans packaged within the same application. That is, the enterprise bean is packaged within an EAR file containing multiple Java EE modules. JNDI addresses using the
		
		java:app[/module name]/enterprise bean name[/interface name]
			◌ The module name is optional. The interface name is required only if the enterprise bean implements more than one business interface.
	
STATELESS SESSION BEAN
	◌ Stateless session beans are comprised of the following elements:
	
	◌ Business interfaces, which contain the declaration of business methods that are going to be visible to client applications
	
	◌ A bean class, which contains the business method implementation to be executed.
	
	◌ A stateless session bean class is any standard Java class that has a class-level annotation of @Stateless.

THE BUSINESS INTERFACE
	◌ Business interfaces can use annotations as well, as described in the following list:
		◌ The @Remote annotation can be used to denote the remote business interface.
		
		◌ The @Local annotation can be used to denote the local business interface.

DEPENDENCY INJECTION
	◌ EJB 3 containers provide the facilities to inject various types of resources into stateless session beans.
	
	◌ The resources that the stateless session bean is trying to use can be injected using annotations or deployment descriptors. Resources can be acquired by annotation of instance variables or annotation of the setter methods.
	
	◌ @Resource

INTERCEPTORS
	◌ The EJB 3 specification provides annotations called interceptors, which allow you to intercept a business method invocation.
	
	◌ An interceptor method can be defined for session and message-driven beans (MDBs).
	
	◌ There are number of use cases for interceptors in a typical application, in which you would find a need to perform a certain task before or after the business method is invoked. Like
		◌ Perform additional security checks before a critical business method that transfers more than $100,000 dollars
		
		◌ Do some performance analysis to compute the time it takes to perform the task
		
		◌ Do additional logging before or after the method invocation
	
	◌ You can either add an @AroundInvoke annotation on a particular method, or you can define an interceptor class whose methods are invoked before a business method is invoked in the bean class.
	
	◌ An interceptor class is denoted by the @Interceptor annotation on the bean class with which it is associated.
	
	◌ In the case of multiple interceptor classes, the @Interceptors annotation is used.
	
	◌ Methods that are annotated with @AroundInvoke should have the following signature:
			
			public Object <METHOD>(InvocationContext) throws Exception
			
STATEFUL SESSION BEANS
	◌ Similar to stateless session beans, stateful beans comprise a bean class and a business interface.
	
	◌ A stateful session bean class is any standard Java class that has a class-level annotation of @Stateful.

CALLBACK METHODS
	Stateful session beans support callback events for construction, destruction, activation, and passivation.
	
	Following are the callbacks that map to the preceding events:
		PostConstruct : Denoted with the @PostConstruct annotation. Any method in the bean class can be marked with this annotation.
		
		PreDestroy : Denoted with the @PreDestroy
		
		PreActivate : Denoted with the @PreActivate
		
		PrePassivate : Denoted with the @PrePassivate
		
		The @Remove annotation is a useful life cycle method for stateful session beans. When the method with the @Remove annotation is called, the container will remove the bean instance from the object pool after the method is executed.	
		
STATEFUL SESSION BEAN CACHE
	◌ Stateful beans are stored in a cache.
	
	◌ This cache is responsible for passivated stateful sessions when the cache becomes too full or a bean is too old.
	
	◌ You may want to set things like the max size of this cache, and when beans should become idle.
	
	◌ Configuration is different depending on whether you are clustered or not.
			No Passivation
				
				@Stateful
				@CacheConfig(maxSize=5,  idleTimeoutSeconds=60, removalTimeoutSeconds=0)
				
	◌ Sometimes it is useful to turn off passivation entirely.
		◌ This can be done by plugging in the caching implementation using the @org.jboss.annotation.ejb.cache.Cache (org.jboss.ejb3.cache.NoPassivationCache.class) annotation.
				
				@Stateful
				@CacheConfig(maxSize=5,  idleTimeoutSeconds=60, removalTimeoutSeconds=0)
				@Cache("NoPassivationCache")
				
WHAT IS JMS?
	A specification that describes a common way for Java programs to create, send, receive and read distributed enterprise messages
	
	loosely coupled communication
	
	Asynchronous messaging
	
	Reliable delivery
		A message is guaranteed to be delivered once and only once.
		
		Outside the specification
		
		Security services
		
		Management services
		
A JMS APPLICATION
	JMS Clients
		Java programs that send/receive messages
	
	Messages
	
	Administered Objects
		preconfigured JMS objects created by an admin for the use of clients ConnectionFactory, Destination (queue or topic)
	
	JMS Provider
		messaging system that implements JMS and administrative functionality
		
JMS MESSAGING DOMAINS
	Point to Point (PTP)
		•built around the concept of message queues
		•each message has only one consumer
		
	Publish Subscribe systems
		•uses a “topic” to send and receive messages
		•each message has multiple consumers
		
MESSAGE CONSUMPTIONS
	Synchronously
		A subscriber or a receiver explicitly fetches the message from the destination by calling the receive method.
		
		The receive method can block until a message arrives or can time out if a message does not arrive within a specified time limit.
	
	Asynchronously
		A client can register a message listener with a consumer.

		Whenever a message arrives at the destination, the JMS provider delivers the message by calling the listener's onMessage() method.
	
CONNECTIONS AND SESSIONS
	Within the JMS general API, there are seven main JMS API interfaces related to sending and receiving JMS messages:
		ConnectionFactory
		Destination
		Connection
		Session
		Message
		MessageProducer
		MessageConsumer
	
	Of these general interfaces, the ConnectionFactory and Destination must be obtained from the provider using JNDI (per the JMS specification). The other interfaces are created through factory methods in the various API interfaces.
	
WORKING WITH QUEUES
	The interfaces used for sending and receiving messages from a queue are as follows:
		QueueConnectionFactory
		Queue
		QueueConnection
		QueueSession
		Message
		QueueSender
		QueueReceiver
		
	As in the JMS general API, the QueueConnectionFactory and Queue objects must be obtained from the JMS provider via JNDI (per the JMS specification).

WORKING WITH TOPICS
	The topic based JMS API is similar to the queue based API in that, in most cases, the
	
	word Queue is replaced with the word Topic. The interfaces used within the pub/sub
	
	messaging model are as follows:
		TopicConnectionFactory
		Topic
		TopicConnection
		TopicSession
		Message
		TopicPublisher
		TopicSubscriber
	
	Notice that the interfaces in the pub/sub domain have names similar to those of the
	
	p2p domain, with the exception of TopicPublisher and TopicSubscriber.
	
JMS MESSAGES
	Message Header
	used for identifying and routing messages
	contains vendor specified values, but could also contain application specific data
	typically name/value pairs
	Message Properties (optional)
	Message Body(optional)
	contains the data
	five different message body types in the JMS specification
	
JMSMESSAGE TYPES	
	Message Type 						Contains 						Some Methods
	---------------------------------------------------------------------------------
	TextMessage 							String								getText,setText
	MapMessage 				set of name/value pairs			setString,setDouble,setLong,getDouble,getString
	BytesMessage 			stream of uninterpreted bytes	writeBytes,readBytes
	StreamMessage 		stream of primitive values 		writeString,writeDouble,writeLong,readString
	ObjectMessage			serialize object 							setObject,getObject
	
WORKING WITH MDBS
	An MDB is an asynchronous message consumer that processes messages delivered via JMS.
	
	While MDBs do the job of processing the messages, the EJB container in which the MDBs run take care of the services (transactions, security, resources, concurrency, message acknowledgement, etc.), letting the bean developer focus on the business logic of processing messages.
	
	MDBs are stateless in nature, which means that EJB containers can have numerous instances of MDBs execute concurrently to process hundreds of JMS messages coming in from various applications.
	
	EJB client applications cannot access MDBs directly as they can with session beans and entities.
	
	The only way to communicate with an MDB would be by sending a JMS message to the destination that the MDB is listening to
	
MDB CLASSES
	Unlike a session bean, an MDB doesn’t have any business interfaces. It has only the following:
		A message-driven class
		An optional callback listener class
		An optional interceptor class
		
	An MDB class is any standard Java class that has a class-level annotation @MessageDriven.
	
	@MessageDriven annotation parameters can be used to specify the JMS queues or topics that the bean is listening to.

RULE TO CODE MDBS
	The MDB class must implement the message listener interface. In the case of JMS,this will be javax.jms.MessageListener

	The class cannot be final or abstract.

	The class should have a no argument public constructor that is used by the EJB container to create instances of the bean class.

CONFIGURATION PROPERTIES
	The EJB container uses these properties to configure the bean and link it to the appropriate JMS provider.

	These configuration properties can be set using the @ActivationConfigProperty annotation.
		@MessageDriven(
		activationConfig = {
			@ActivationConfigProperty( propertyName ="destinationName", propertyValue ="StatusMessageTopic")
			@ActivationConfigProperty propertyName= "destinationType ", propertyValue = "javax.jms.Topic"},
		mappedName ="StatusMessageTopic"
		public class TraineeStatusBean implements javax.jms.MessageListener{
			//TODO
		}
		
MESSAGE ACKNOWLEDGMENT
	The EJB container provides a message acknowledgment service. There are two message acknowledgment modes, as follows:
		Auto acknowledge
		Dups ok acknowledge
		
	In the case of Auto acknowledge , the message delivery acknowledgment happens after the onMessage (). This property is useful for applications that require no duplicate messages.
	
	In the case of Dups ok acknowledge , the acknowledgment is done lazily, which means that there might be duplicate delivery of messages, but it reduces the overhead for the session in terms of immediate

	@MessageDriven(
		activationConfig = @ActivationConfigProperty( propertyName ="acknowledgeMode", propertyValue ="="Dups ok acknowledge")})"))
	
EJB TIMERS: INTRODUCTION
	A scheduling capability is provided for EJBs; the difference being that EJBs initiate the scheduler and that the business process is encapsulated as an EJB method .
	EJB timer service is a container managed service, it can be used in conjunction with stateless session beans or MDBs .
	However as EJB 3 entities are not container managed, they cannot use timers.
	An EJB creates a timer by invoking the TimerService.createTimer method
	The same EJB will have a @Timeout annotated callback method which is invoked by the container when the scheduled event occurs.
	Instead of a @Timeout annotated method, the EJB can implement an ejbTimeout () method.
	
EJB TIMERS
	Timer is an object that represents a timed event that has been scheduled by the EJB timer service.
	
	A Timer object implements the javax.ejb.Timer interface. This interface contains a number of methods which provide information about the timed event
	
	Performs similar role of job schedulers are of Two types
	Single action
	
	createTimer(Date expiration, Serializable
			fires once at or after a specific time in the future
		
		createTimer(long duration, Serializable
			fires once after a specific delay period
	
	Interval timer
		createTimer(Date intialExpiration , long intervalDuration , Serializable
			continually fires every intervalDuration after the initialExpiration time
		
		createTimer(long initialDuration , long intervalDuration , Serializable info
			continually fires every intervalDuration after the initialDuration delay
			
	Original EJB Timer Service part of EJB 2.1
	
	EJB 3.0 added annotation based extensions that eliminated inheritance based solution requirements. javax.ejb.Timeout
	
	Accessing TimerService
		Using Annotations
			@Resource privateTimerService timerService
		
		Getting Timers
			timerService.getTimers
			
	Cancelling Timers
			
			for (Timer timer : (Collection<Timer>) timerService.getTimers ()){
				timer.cancel
			}
			
	Timers associated with the EJB that created them are automatically integrated into JTA transaction

EJB TIMER CALLBACKS
	Using annotations
		@Timeout
		public void addInterest (Timer timer) { 
			// add 1% interest to all savings accounts
			System.out.println("Timer invoked");
		}
	
	Using interfaces
		@Stateless
		public class BankServiceBean implements BankService , TimedObject
